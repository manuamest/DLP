***EXPRESIONES MULTILINEA Y COMBINADOR DE PUNTO FIJO INTERNO***

letrec sum : Nat -> Nat -> Nat = 
    lambda n : Nat. lambda m : Nat. if iszero n then m else succ (sum (pred n) m)
in
    letrec prod : Nat -> Nat -> Nat =
        lambda n : Nat. lambda m : Nat. if iszero m then 0 else sum n (prod n (pred m))
    in
        prod 12 5
    ;;


letrec sum : Nat -> Nat -> Nat = 
    lambda n : Nat. lambda m : Nat. if iszero n then m else succ (sum (pred n) m) in 
        letrec fib : Nat -> Nat =
            lambda n : Nat. if iszero n then 0
                        else if iszero (pred n) then 1
                        else sum (fib (pred n)) (fib (pred (pred n))) in
                        fib 10;;

letrec sum : Nat -> Nat -> Nat = 
    lambda n : Nat. lambda m : Nat. if iszero n then m else succ (sum (pred n) m)
in
    letrec prod : Nat -> Nat -> Nat =
        lambda n : Nat. lambda m : Nat. if iszero m then 0 else sum n (prod n (pred m))
    in 
        letrec factorial : Nat -> Nat =
          lambda n : Nat.
            if iszero n then 1
            else prod n (factorial (pred n))
        in
        factorial 5;;

***CONTEXTO DE DEFINICIONES GLOBALES***

a = "abc";;
a;;

x = true;;
id = lambda x : Bool. x;;

x = succ 0;;
id = lambda x : Nat. x

***TYPE STRING***
length = "abc";;
length "";;
length "holaquetal";;
concat "abc" "dfg";;

***TUPLES***

tupla = {37, "hola", false, {2,5}};;
tupla.2;;
tupla.4.1;;


***RECORDS***
a = 5;;
b = {x = 31, y = a};;
b.x;;


***LISTS***

x = 4;;

lstNil = nil[Nat];;

lst1 = cons[Nat:2, (cons[Nat:3 , (nil[Nat])])];;

lst2 = cons[Nat:4, (cons[Nat:5 , (nil[Nat])])];;

lst3 = cons[Nat:x, (nil[Nat])];;

head[Nat] lst1;;

tail[Nat] lst1;;

isempty[Nat] lstNil;;

letrec len : (list[Nat]) -> Nat =
  lambda lst : list[Nat].
    if (isempty[Nat] lst) then 0
    else (succ(len(tail[Nat] lst)))
in len lst1;;

letrec map : (Nat -> Nat) -> list[Nat] -> list[Nat] =
  lambda f : (Nat -> Nat).
  lambda lst : list[Nat].
    if isempty[Nat] lst then 
        (nil[Nat])
    else 
        cons[Nat:(f (head[Nat] lst)),(map f (tail[Nat] lst))]
in map (lambda x : Nat. succ x) lst1;;

letrec append : list[Nat] -> list[Nat] -> list[Nat] =
  lambda lst1 : list[Nat].
  lambda lst2 : list[Nat].
    if isempty[Nat] lst1 then
      lst2
    else
      cons[Nat:(head[Nat] lst1),(append (tail[Nat] lst1) lst2)]
in append lst1 lst2;;

***SUBTYPING**

a = {x = 1, y = 1, z = {x = 1}};;
b = {x = 1, y = 1, z = a};;